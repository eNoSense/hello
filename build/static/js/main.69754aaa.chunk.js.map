{"version":3,"sources":["Signin.js","Signup.js","PageIndex.js","App.js","serviceWorker.js","index.js"],"names":["Signin","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sign_in_form","nickname","password","event","field","val","target","value","copy","JSON","parse","stringify","setState","_this2","_this$state$sign_in_f","alert","AV","User","logIn","then","user","console","log","current_user","history","push","error","_this3","react_default","a","createElement","className","onChange","e","onSignInFromValueChange","email","type","placeholder","onClick","login","react_router_dom","to","Component","withRouter","Signup","sign_up_form","confirm_password","_this$state$sign_up_f","setUsername","setEmail","setPassword","signUp","loginedUser","onValueChange","onSubmitSignUpForm","PageIndex","current","logOut","response","logout","App","init","appId","appKey","react_router","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69754aaa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport AV from  'leancloud-storage';\r\n\r\nclass Signin extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      sign_in_form: {\r\n        nickname: '',\r\n        password: '',\r\n      }\r\n    }\r\n  }\r\n\r\n  onSignInFromValueChange (event, field) {\r\n    const val = event.target.value\r\n    let copy = JSON.parse(JSON.stringify(this.state))\r\n    copy.sign_in_form[field] = val\r\n    this.setState(copy)\r\n  }\r\n\r\n  login() {\r\n    const { nickname, password } = this.state.sign_in_form\r\n    if (!nickname || !password) {\r\n      alert('表单信息没有填写完整')\r\n    }\r\n    AV.User.logIn(nickname, password)\r\n      .then(user => {\r\n        console.log(user)\r\n        this.setState({\r\n          current_user: user,\r\n        })\r\n        this.props.history.push('/index')\r\n      }, error => {\r\n        alert(JSON.stringify(error))\r\n      })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"sign_up\">\r\n          <h1>用户登录</h1>\r\n          <p> <input onChange={(e) => { this.onSignInFromValueChange(e, 'nickname')}} value={this.state.sign_in_form.email} className=\"middle\" type=\"text\" placeholder=\"用户名\" /> </p>\r\n          <p> <input onChange={(e) => { this.onSignInFromValueChange(e, 'password')}} value={this.state.sign_in_form.password} className=\"middle\" type=\"password\" placeholder=\"密码\" /> </p>\r\n          <p>\r\n            <input onClick={() => { this.login() }} className=\"middle-button\" type=\"submit\" value=\"登录\"/>\r\n            <Link to=\"/signup\" >去注册 >> </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Signin);\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport AV from 'leancloud-storage';\r\n\r\nclass Signup extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      sign_up_form: {\r\n        nickname: '',\r\n        email: '',\r\n        password: '',\r\n        confirm_password: '',\r\n      },\r\n    }\r\n  }\r\n\r\n  onValueChange (event, field) {\r\n    const val = event.target.value\r\n    let copy = JSON.parse(JSON.stringify(this.state))\r\n    copy.sign_up_form[field] = val\r\n    this.setState(copy)\r\n  }\r\n\r\n  onSubmitSignUpForm () {\r\n    const {nickname, email, password, confirm_password} = this.state.sign_up_form\r\n    if (!email || !password || !confirm_password || !nickname) {\r\n      alert('注册信息不能为空！')\r\n    }\r\n    if (password !== confirm_password) {\r\n      alert('两次密码填写不一致！')\r\n    }\r\n    //\r\n    const user = new AV.User()\r\n    user.setUsername(nickname)\r\n    user.setEmail(email)\r\n    user.setPassword(password)\r\n    user.signUp().then((loginedUser) => {\r\n      console.log('loginedUser')\r\n      console.log(loginedUser)\r\n      this.props.history.push('/index');\r\n    }, (error) => {\r\n      alert(JSON.stringify(error))\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"sign_up\">\r\n          <h1>用户注册</h1>\r\n          <p> <input onChange={(e) => { this.onValueChange(e, 'nickname')}} value={this.state.sign_up_form.nickname} className=\"middle\" type=\"text\" placeholder=\"昵称\" /> </p>\r\n          <p> <input onChange={(e) => { this.onValueChange(e, 'email')}} value={this.state.sign_up_form.email} className=\"middle\" type=\"text\" placeholder=\"Email\" /> </p>\r\n          <p> <input onChange={(e) => { this.onValueChange(e, 'password')}} value={this.state.sign_up_form.password} className=\"middle\" type=\"password\" placeholder=\"密码\" /> </p>\r\n          <p> <input onChange={(e) => { this.onValueChange(e, 'confirm_password')}} value={this.state.sign_up_form.confirm_password} className=\"middle\" type=\"password\" placeholder=\"重复密码\" /> </p>\r\n          <p> <input onClick={() => { this.onSubmitSignUpForm() }} className=\"middle-button\" type=\"submit\" value=\"注册\"/> </p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Signup);\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport AV from  'leancloud-storage';\r\n\r\nclass PageIndex extends Component  {\r\n  componentDidMount() {\r\n    if (!AV.User.current()) {\r\n      this.props.history.push('/signin');\r\n    }\r\n    this.setState({\r\n      current_user: AV.User.current()\r\n    })\r\n  }\r\n\r\n  logout() {\r\n    console.log('this', this.state)\r\n    AV.User.logOut()\r\n      .then((response) => {\r\n        this.props.history.push('/signin');\r\n        console.log('logout response')\r\n        console.log(response)\r\n        console.log('this2', this.state)\r\n        this.setState({\r\n          current_user: null,\r\n        });\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        我是主页\r\n        <span className=\"aWithoutHref\" onClick={() => {this.logout()}}>登出</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(PageIndex)\r\n","import React from 'react';\nimport {HashRouter, Route, Switch, Redirect} from 'react-router-dom';\nimport AV from  'leancloud-storage';\n\nimport './App.css';\nimport Signin from './Signin'\nimport Signup from './Signup'\nimport PageIndex from './PageIndex'\n\nfunction App() {\n  console.log('init app');\n  AV.init({\n    appId: 'FYCTcKYDOcOsKw2vnRmNvBwQ-gzGzoHsz',\n    appKey: 'BVDwbxfu4n7ziAUpuEDnf2z3',\n  })\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" render={() => (\n            <Redirect to=\"/signin\"/>\n          )}/>\n          <Route path=\"/signin\" component={Signin}/>\n          <Route path=\"/signup\" component={Signup}/>\n          <Route path=\"/index\" component={PageIndex}/>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}